
The granthawork directory contains material related to the representation
of Sanskrit text in the Grantha script.

The first thing to do is examine the html files in folders
 - ex01  Wikipedia example, based on file ex01_roman.txt
 - ex02  Sunahsepa example, based on file Sunahsepa_slp1.txt
 - ex03  Gurustotram example, based on file gurustotram_roman.txt
 - alphabet Comparison of Sanskrit alphabet, etc., based on
         alphabet.txt, convowel.txt, 2gram.txt, and 3gram.txt
Just double click one of the html files, and it should open in your
default browser; I have tested this with Chrome browser.

A next thing that could be done is to generate specific examples,
using tools written as python programs:
1. Compare versions of longer texts:
  python convert_text.py xxx/yyy_zzz.txt
  For example, the ex01-3 examples were generated by
   python convert_text.py ex01/ex01_roman.txt
   python convert_text.py ex02/Sunahsepa_slp1.txt
   python convert_text.py ex03/gurustotram_roman.txt
The starting files have a title in line 1 and the text to be rendered
in the remaining lines.
2. Compare in one document various renderings of words or word fragments:
  python compare_words.py xxx/wordlist.txt xxx/wordlist.html
  For example, the html files in alphabet directory were created by
  python compare_words.py alphabet/alphabet.txt alphabet/alphabet.html
  python compare_words.py alphabet/convowel.txt alphabet/convowel.html
  python compare_words.py alphabet/2gram.txt alphabet/2gram.html
  python compare_words.py alphabet/3gram.txt alphabet/3gram.html
The input files (such as alphabet.txt) have a title line and then
a word on each of remaining lines. These words are coded in slp1.

2a. Differences in wikipedia example:
  python compare_words.py ex01words/ex01words.txt ex01words/ex01words.html
 This may help pin down differences in rendering of 'pUrvAparO' and 'sTitaH'

3. To examine the unicode sequence of a text:
  python touni_lines.py  inputfile outputfile
For example, to see the unicode characters in the first example using
  Original Grantha font, 
  python touni_lines.py ex01/ex01_grantha.txt temp.txt 
  

The granthafonts folder contains the font files used in the html displays.
 e-Grantamil.ttf  : original file from Indolipi site (Elmar Kniprath) 
 e-Grantamil-sd.ttf : A revision used at Sanskrit Documents website
 e-Grantamil 7.ttf : A revision (ca. 2012) by Kniprath.

The first two embed the grantha script into the Bengali unicode code block;
the third uses the Malayalam code block.

The transcoder folder contains the xml files describing the transcoding from
slp1.
These are in a form expected by transcoder.py.
slp1_grantha2.xml  transcodes in a way consistent with the fonts
e-Grantamil.ttf and e-Grantamil-sd.ttf.
slp1_grantha3.xml is consisten with 'e-Grantamil 7.ttf' font.

Both are almost the same as slp1_deva.xml, except that the Devanagari
unicode block u0900-u097f is translated:
 - to Bengali code block u0980-u09ff (slp1_grantha2.xml)
 - to Malayalam code block u0d00-u097f (slp1_grantha3.xml)
There are a couple of exceptions to this translation relation, which are
mentioned in comments in the respective xml files.

Neither of these transcodings uses the current Grantha code block
u11300-u1137f; currently no font is known that is consistent with the
Grantha unicode code block.

-----------------------------------------------------------------------
Local font installation: not recommended
I tried installing the three grantamil fonts on local Windows 10 computer.
However, I never got satisfactory results when viewing the text files
(e.g. ex01/ex01_grantha.txt , and ex01_grantha-sd.txt, and ex01_grantha7.txt)
with various text editors (Emacs (old version Emacs 23.2.1 ), Notepad++,
Notepad).
I would be interested to know details if anyone has a satisfactory luck
with local font installation and text editors.
My experience is that browsers (e.g. Chrome) do a better job here.
